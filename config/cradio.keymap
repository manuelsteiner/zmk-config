// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
//define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LCTRL k2  &ht LALT k3  &ht LGUI k4
//define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RALT k2  &ht RCTRL k3  &ht RSHFT k4

&lt {
    compatible = "zmk,behavior-layer-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
    bindings = <&kp>, <&kp>;
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        hardware_layer {
            bindings = <&mo 4>;
            key-positions = <32 31>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W                &kp E            &kp R            &kp T          &kp Y      &kp U             &kp I             &kp O                 &kp P
&hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_GUI F  &kp G          &kp H      &hmr RIGHT_GUI J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SQT
&kp Z              &kp X                &kp C            &kp V            &kp B          &kp N      &kp M             &kp COMMA         &kp DOT               &kp SLASH
                                                         &lt 2 TAB        &lt 3 ENTER    &kp SPACE  &lt 1 BACKSPACE
            >;
        };

        numbers_nav_layer {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &trans     &trans    &trans    &trans  &trans     &trans
&trans  &kp N4  &kp N5  &kp N6  &trans     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&kp N0  &kp N1  &kp N2  &kp N3  &trans     &trans    &trans    &trans  &trans     &trans
                        &trans  &kp ESC    &trans    &trans
            >;
        };

        symbols_layer {
            bindings = <
&trans  &trans     &trans          &trans     &kp LBKT                &kp RBKT               &kp AMPERSAND    &kp ASTERISK  &kp BACKSLASH  &kp PIPE
&trans  &kp TILDE  &kp MINUS       &kp EQUAL  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT   &kp CARET      &kp SEMICOLON
&trans  &kp GRAVE  &kp UNDERSCORE  &kp PLUS   &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp COLON
                                   &trans     &trans                  &trans                 &kp DEL
            >;
        };

        functions_layer {
            bindings = <
&kp F9  &kp F10  &kp F11  &kp F12  &trans    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans      &trans
&kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp C_PREV  &kp C_PLAY    &kp C_PAUSE   &kp C_NEXT  &trans
&kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans      &kp C_BRI_DN  &kp C_BRI_UP  &trans      &trans
                          &trans   &trans    &trans      &trans
            >;
        };

        hardware_layer {
            bindings = <
&trans        &trans        &trans        &trans        &out OUT_TOG    &trans  &trans  &trans  &trans       &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans       &trans
&sys_reset    &bootloader   &trans        &trans        &bt BT_CLR      &trans  &trans  &trans  &bootloader  &sys_reset
                                          &trans        &trans          &trans  &trans
            >;
        };
    };
};
